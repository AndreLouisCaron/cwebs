/*!
 * @file simple-io.cpp
 * @brief Test suite for Web Socket streaming parser for C++.
 * @see http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17
 *
 * @author Andre Caron (andre.louis.caron@usherbrooke.ca)
 */

// Use QUuid::createUuid() to generate 16-byte integers?

#include "ws.hpp"
#include <iostream>
#include <exception>

int main ( int, char ** )
try
{
    const char data[] =
        // single-frame unmasked text message.
        "\x81\x05\x48\x65\x6c\x6c\x6f"
        // single-frame masked text message.
        "\x81\x85\x37\xfa\x21\x3d\x7f\x9f\x4d\x51\x58"
        // fragmented unmasked text message.
        "\x01\x03\x48\x65\x6c"
        "\x80\x02\x6c\x6f"
        // unmasked ping request (ignore body).
        "\x89\x05\x48\x65\x6c\x6c\x6f"
        // unmasked pong response (ignore body).
        "\x8a\x85\x37\xfa\x21\x3d\x7f\x9f\x4d\x51\x58"
        // binary message of 256 bytes.
        "\x82\x7E\x01\x00"
        "\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        "\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        ;
#if 0
    // get a wire (session).
    ws::iwire stream;
    // parse a bunch of messages.
    stream.feed(data, sizeof(data)-1);
#else
    // get a wire (session).
    ws::owire stream;
    // ship a bunch of messages.
    stream.put_ping();
    stream.put_text("Hello, world!");
    stream.put_pong();
    stream.put_pong();
#endif
}
catch ( const std::exception& error )
{
    std::cerr
        << error.what()
        << std::endl;
    return (EXIT_FAILURE);
}
